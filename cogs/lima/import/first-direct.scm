(require "lima/types.scm")
(require "lima/list.scm")
(require "lima/import/prelude.scm")

;; extract imported CSV transactions into an intermediate representation
(define (extract cur fields txns)
  (let* ((date-i (list-index fields "date"))
         (description-i (list-index fields "description"))
         (amount-i (list-index fields "amount")))
    (map (lambda (txn)
          (let* ((date (parse-date (list-ref txn date-i) "%d/%m/%Y"))
                 (description (list-ref txn description-i))
                 (amt (parse-decimal (list-ref txn amount-i))))
            (list (cons 'date date)
              (cons 'amount (amount amt cur))
              (cons 'narration description))))
      (reverse txns))))

(define (extract-balance cur fields txns)
  (let* ((date-i (list-index fields "date"))
         (balance-i (list-index fields "balance"))
         (txn0 (car txns))
         (date (parse-date (list-ref txn0 date-i) "%d/%m/%Y"))
         (amt (parse-decimal (list-ref txn0 balance-i))))
    (list (cons 'date date)
      (cons 'amount (amount amt cur)))))

(let* ((cur "GBP")
       (accounts '("Assets:Bank:Current" "Expenses:Unknown"))
       (fields (imported-fields *imported*))
       (txns (imported-transactions *imported*))
       (bln (extract-balance cur fields txns)))
  (for-each (lambda (txn) (display (format-transaction txn accounts)))
    (extract cur fields txns))
  (display-balance bln (car accounts)))
