(require "lima/types.scm")
(require "lima/list.scm")
(require "lima/import/prelude.scm")
(require "lima/import/account-inference.scm")

;; extract imported CSV transactions into an intermediate representation
(define (make-extract cur fields primary-account)
  (let* ((date-i (list-index fields "date"))
         (description-i (list-index fields "description"))
         (amount-i (list-index fields "amount")))
    (lambda (txn)
      (let* ((date (parse-date (list-ref txn date-i) "%d/%m/%Y"))
             (description (list-ref txn description-i))
             (amt (parse-decimal (list-ref txn amount-i))))
        (list (cons 'date date)
          (cons 'amount (amount amt cur))
          (cons 'primary-account primary-account)
          (cons 'narration description))))))

(define (extract-balance cur fields txns)
  (let* ((date-i (list-index fields "date"))
         (balance-i (list-index fields "balance"))
         (txn0 (car txns))
         ;; Beancount balance date is as of midnight at the beginning of the day, but we have the end of the day, so add 1 day
         (date (date-after (parse-date (list-ref txn0 date-i) "%d/%m/%Y") 1))
         (amt (parse-decimal (list-ref txn0 balance-i))))
    (list (cons 'date date)
      (cons 'amount (amount amt cur)))))

(let* ((cur "GBP")
       (primary-account "Assets:Bank:Current")
       (secondary-accounts '("Expenses:Unknown"))
       (fields (imported-fields *imported*))
       (txns (imported-transactions *imported*))
       (payees (imported-payees *imported*))
       (narrations (imported-narrations *imported*))
       (bln (extract-balance cur fields txns))
       (txn-directive (config-value-or-default '(import txn-directive) "txn" *config*)))
  (transduce (reverse txns)
    (mapping (make-extract cur fields primary-account))
    (mapping (make-infer-secondary-accounts-from-payees-and-narrations payees narrations))
    (into-for-each (lambda (txn) (display (format-transaction txn txn-directive)))))
  (display (format-balance bln primary-account)))
