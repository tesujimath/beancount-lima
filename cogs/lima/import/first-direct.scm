(require "lima/types.scm")
(require "lima/list.scm")
(require "lima/stdlib.scm")
(require "lima/import/prelude.scm")
(require "lima/import/extract.scm")
(require "lima/import/account-inference.scm")

;; extract imported CSV transactions into an intermediate representation
(define (make-extract field-names primary-account cur)
  (let* ((get-date (make-field-getter field-names "date" (lambda (x) (parse-date x "%d/%m/%Y"))))
         (get-amount (make-field-getter field-names "amount" parse-decimal))
         (get-description (make-field-getter field-names "description" identity)))
    (lambda (txn)
      (list (cons 'date (get-date txn))
        (cons 'amount (amount (get-amount txn) cur))
        (cons 'primary-account primary-account)
        (cons 'narration (get-description txn))))))

(define (extract-balance cur field-names txns)
  (let* ((get-balance (make-field-getter field-names "balance" parse-decimal))
         ;; Beancount balance date is as of midnight at the beginning of the day, but we have the end of the day, so add 1 day
         (get-date (make-field-getter field-names "date" (lambda (x) (date-after (parse-date x "%d/%m/%Y") 1))))
         (txn0 (car txns)))
    (list (cons 'date (get-date txn0))
      (cons 'amount (amount (get-balance txn0) cur)))))

(let* ((cur "GBP")
       (primary-account "Assets:Bank:Current")
       (secondary-accounts '("Expenses:Unknown"))
       (field-names (imported-fields *imported*))
       (txns (imported-transactions *imported*))
       (payees (imported-payees *imported*))
       (narrations (imported-narrations *imported*))
       (bln (extract-balance cur field-names txns))
       (txn-directive (config-value-or-default '(import txn-directive) "txn" *config*)))
  (transduce (reverse txns)
    (mapping (make-extract field-names primary-account cur))
    (mapping (make-infer-secondary-accounts-from-payees-and-narrations payees narrations))
    (into-for-each (lambda (txn) (display (format-transaction txn txn-directive)))))
  (display (format-balance bln primary-account)))
