(require "srfi/srfi-28/format.scm")
(require "lima/types.scm")
(require "lima/list.scm")
(require "lima/alist.scm")
(require "lima/import/prelude.scm")
(require "lima/import/types.scm")
(require "lima/import/display.scm")

;; extract imported OFX1 transactions into an intermediate representation
(define (extract hdr fields txns)
  (let* ((cur (cdr-assoc-or-default "curdef" "USD" hdr))
         (dtposted-i (list-index fields "dtposted"))
         (trnamt-i (list-index fields "trnamt"))
         (fitid-i (list-index fields "fitid"))
         (name-i (list-index fields "name"))
         (memo-i (list-index fields "memo"))
         (acctid (cdr-assoc-or-default "acctid" "unknown-acctid" hdr)))
    (map (lambda (txn)
          (let* ((date (parse-date (list-ref txn dtposted-i) "%Y%m%d"))
                 (name (list-ref txn name-i))
                 (memo (list-ref txn memo-i))
                 (fitid (list-ref txn fitid-i))
                 (amt (parse-decimal (list-ref txn trnamt-i)))
                 (txnid (format "~a.~a" acctid fitid)))
            (list (cons 'date date)
              (cons 'payee name)
              (cons 'narration memo)
              (cons 'amount (amount amt cur))
              (cons 'txnid txnid))))
      txns)))

; (define converted (convert *imported* "Assets:Bank" "Expenses:Unknown"))
(for-each (lambda (txn) (display (format-transaction txn '("Assets:Bank:Current" "Expenses:Unknown"))))
  (extract (imported-header *imported*) (imported-fields *imported*) (imported-transactions *imported*)))
